<?php

/**
 * Implements hook_permission().
 */
function etype_newsletters_permission() {
  return [
    'administer etype newsletters' => [
      'title' => t('Administer eType Newsletters'),
    ],
  ];
}

/**
 * @return array
 * Create custom VBO action
 */
function etype_newsletters_action_info() {
  return [
    'etype_newsletters_add_nodes' => [
      'type' => 'node',
      'label' => t('Add to newsletter'),
      'configurable' => FALSE,
      'triggers' => ['any'],
    ],
  ];
}

/**
 * @param $node
 * @param $context
 * Function attached to custom action to store selected node ids
 */
function etype_newsletters_add_nodes(&$node, $context) {
  $nid = db_merge('etype_newsletters_nodes')
    ->key(['nid' => $node->nid])
    ->fields([
      'nid' => $node->nid,
    ])
    ->execute();
  // dpm($nid);
}

/**
 * @return array
 */
function etype_newsletters_menu() {

  $items['admin/config/etype/etype_newsletters/settings'] = [
    'title' => 'Create eType Newsletter',
    'description' => 'Send a newsletter.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['etype_newsletters_admin_form'],
    'access arguments' => ['administer etype newsletters'],
    'file' => 'etype_newsletters.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
  ];

  $items['admin/config/etype_newsletters/confirm_send'] = [
    'title' => 'Send eType Newsletter',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['etype_newsletters_admin_confirm_form'],
    'access arguments' => ['administer etype newsletters'],
    'file' => 'etype_newsletters.admin.inc',
    'type' => MENU_CALLBACK,
  ];

  $items['admin/etype_newsletters/build_newsletter'] = [
    'title' => 'Build eType Newsletter',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['etype_newsletters_build_newsletter'],
    'access arguments' => ['administer etype newsletters'],
    'file' => 'etype_newsletters.twig.inc',
    'type' => MENU_CALLBACK,
  ];

  $items['admin/config/etype_newsletters/complete'] = [
    'title' => 'eType Newsletter Sent',
    'access arguments' => ['administer etype newsletters'],
    'type' => MENU_NORMAL_ITEM,
  ];

  /* access cron job function via url for testing */
  $items['etype_newsletters_cron'] = array(
    'title' => 'Send Queued Newsletters',
    'description' => 'Send Queued Newsletters',
    'page callback' => 'etype_newsletters_send_queued',
    'access arguments' => ['administer etype newsletters'],
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * @param $node
 * Remove newsletter row on node deletion
 */
function etype_newsletters_node_delete($node) {
  db_delete('etype_newsletters_nodes')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * @param $send_date
 * @param $params
 * @param $sent
 */
function etype_newsletters_save($send_date, $params, $sent) {
  db_insert('etype_newsletters')
    ->fields(array('send', 'data'))
    ->values(array(
      'send' => $send_date,
      'data' => serialize($params),
      'sent' => $sent,
    ))
    ->execute();
  db_delete('etype_newsletters_nodes')->execute();
}

/**
 *
 */
function etype_newsletters_send_queued() {
  $date = new DateTime();
  $now = $date->format('U');
  $result = db_select('etype_newsletters', 'n')
    ->fields('n')
    ->condition('sent', 0,'=')
    ->condition('send', $now,'<')
    ->execute()
    ->fetchAll();

  if (count($result) > 0) {
    foreach ($result as $item) {
      var_dump($item);
      $params = unserialize($item->data);
      $client = new SoapClient('https://www.etypeservices.com/Service_EmailtoListViaDrupal.asmx?WSDL');
      $response = $client->EmailtoListViaDrupal($params);

      if ($response->EmailtoListViaDrupalResult !== 1) {
        watchdog(
          'etype_newsletters',
          "%id got %r when sending.",
          ['%id' => $item->id, '%r' => $response],
          WATCHDOG_WARNING
        );
      } else {
        watchdog(
          'etype_newsletters',
          "%id was sent to the %l list.",
          ['%id' => $item->id, '%l' => $params['SubscriberType']],
          WATCHDOG_NOTICE
        );
      }
      db_update('etype_newsletters') // Table name no longer needs {}
      ->fields([
        'sent' => 1,
      ])
        ->condition('id', $item->id, '=')
        ->execute();
    }
  }
}

/**
 * Cron Jobs
 * @param $op
 * @param null $job
 * @return mixed
 */
function etype_newsletters_cronapi($op, $job = NULL) {
  $items['etype_newsletters_cron'] = array(
    'description' => 'Send Queued Newsletters',
    'rule' => '*/15 * * * *',
    'callback' => 'etype_newsletters_send_queued',
  );
  return $items;
}


